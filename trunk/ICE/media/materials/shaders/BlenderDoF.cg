//gets the color backbuffer
//uniform sampler2D bgl_RenderedTexture;
 
//gets the depth backbuffer
//(as a normalized tex2d, not a true 24bit depth buffer)
//uniform sampler2D bgl_DepthTexture;
 
 
float4 blurPass1(
    uniform sampler2D scene: register(s0),
    uniform sampler2D pdepth: register(s1),
    uniform float focalDepth,
    in float2 texcoord : TEXCOORD0
    ) : COLOR
{
	const float tap = 4;	    //1-8
	const float pmax = 0.003;
 
	//float focus = 0.1;			//Focal Distance, normalized 0.8-0.999
	float radius = 2.00;	  	//0-20.0
 
    float4 sum = float4(0,0,0,0);
	int j;
    int i;
	//float focus = tex2D(pdepth, float2(0.5,0.5)).r;
    float focus = focalDepth;
	float depth = tex2D(pdepth, texcoord);
	float delta = (abs(depth - focus)*abs(depth - focus))/(tap);
	delta = clamp(radius*delta, -pmax, pmax);
 
    for( i= -tap ;i < tap; i++)
    {
			sum += tex2D(scene, texcoord + float2(-i, i)*delta);
	}
	//Dof Pass
	float4 pass1 = sum/(2.0*tap);
	//float4 pass1 = float4(depth, depth, depth, 1.0);
 
    return pass1*1.2;
}
 
float4 blurPass2(
    uniform sampler2D scene: register(s0),
    uniform sampler2D pdepth: register(s1),
    uniform float focalDepth,
    in float2 texcoord : TEXCOORD0
    ) : COLOR
{
	const float tap = 4;	    //1-8
	const float pmax = 0.003;
 
	//float focus = 0.1;			//Focal Distance, normalized 0.8-0.999
	float radius = 2.00;	  	//0-20.0
 
    float4 sum = float4(0,0,0,0);
	int j;
    int i;
	//float focus = tex2D(pdepth, float2(0.5,0.5)).r;
    float focus = focalDepth;
	float depth = tex2D(pdepth, texcoord);
	float delta = (abs(depth - focus)*abs(depth - focus))/(tap);
	delta = clamp(radius*delta, -pmax, pmax);
 
    for( i= -tap ;i < tap; i++)
    {
			sum += tex2D(scene, texcoord + float2(i, i)*delta);
	}
	//Dof Pass
	float4 pass1 = sum/(2.0*tap);
 
	//float4 pass1 = float4(depth, depth, depth, 1.0);
 
    return pass1*1.2;
}