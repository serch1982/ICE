// Vertex Shader Parameters
uniform float3 LightPosition; // object space
uniform float3 EyePosition;   // object space
uniform float4  shininess;
uniform float4x4 WorldViewProj;

// Pixel Shader Parameters
		 
uniform float4 ambient;
uniform float4 diffuse;
uniform float4 specular;
uniform float4 emissive;

uniform float4 ambientLightColour;
uniform float4 diffuseLightColour;
uniform float4 specularLightColour;

uniform sampler2D celShadingRamps;
uniform sampler2D textureColor;
	
//Input for the vertex Shader
//There are two vertex shaders both take the same input
struct VS_INPUT
{
   float4 Position         : POSITION0;
   float3 Normal           : NORMAL0;
   float2 Texcoord         : TEXCOORD0;
};

//Output for the Cel vertex shader
struct VS_OUTPUT
{
   float4 Position  : POSITION0;
   float2 Texcoord  : TEXCOORD0;
   float  Diffuse   : TEXCOORD1;
   float  Specular	: TEXCOORD2;
   float  Edge      : TEXCOORD3;     
};
	
/* Cel shading vertex program for single-pass rendering
   In this program, we want to calculate the diffuse and specular
   ramp components, and the edge factor (for doing simple outlining)
   For the outlining to look good, we need a pretty well curved model.
*/
VS_OUTPUT toonmagma_vp(VS_INPUT Input)
{
	VS_OUTPUT Output;

	// calculate output position
	Output.Position = mul(WorldViewProj, Input.Position);

	// calculate light vector
	float3 N = normalize(Input.Normal);
	float3 L = normalize(LightPosition - Input.Position.xyz);
	
	// Calculate diffuse component
	Output.Diffuse = max(dot(N, L) , 0);

	// Calculate specular component
	float3 E = normalize(EyePosition - Input.Position.xyz);
	float3 H = normalize(L + E);
	Output.Specular = pow(max(dot(N, H), 0), shininess);
	// Mask off specular if diffuse is 0
	if (Output.Diffuse == 0) Output.Specular = 0;

	// Edge detection, dot eye and normal vectors
	Output.Edge = max(dot(N, E), 0);
	
	// pass the main uvs straight through unchanged
	Output.Texcoord = Input.Texcoord;
	
	return Output;
}

//Input for the Cel Pixel shader
struct PS_INPUT
{
   float2 Texcoord  : TEXCOORD0;
   float  Diffuse   : TEXCOORD1;
   float  Specular	: TEXCOORD2;
   float  Edge      : TEXCOORD3;    
};

float4 toonmagma_fp(PS_INPUT Input, 
					uniform sampler2D textureSubs,
					uniform float4 subsColor,
					uniform float offset) : COLOR0
{
	float2 diffuseInUv = float2(Input.Diffuse,0);
	float2 specularInUv = float2(Input.Specular,1);
	float2 edgeInUv = float2(Input.Edge,2);

	float4 colorTex = tex2D(textureColor, Input.Texcoord);
	float4 color;
	// Step functions from textures
	Input.Diffuse = tex2D(celShadingRamps, diffuseInUv).x;
	Input.Specular = tex2D(celShadingRamps, specularInUv).x;
	Input.Edge = tex2D(celShadingRamps, edgeInUv).x;

	
	color =  Input.Edge * (
            (diffuse * Input.Diffuse * diffuseLightColour) * 0.9 +
            (tex2D(textureSubs,Input.Texcoord+offset) * 0.8) + 
            (specular * Input.Specular * specularLightColour) * 0.8 + 
            (ambient*ambientLightColour) + 
            (emissive * 0.5)
            );


	color.a = tex2D(textureSubs,Input.Texcoord).a;
	
	return color;
}
			 
			 
